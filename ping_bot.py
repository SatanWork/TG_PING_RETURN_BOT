import os
import json
import asyncio
import logging
from datetime import datetime
from telegram import Bot
from telegram.ext import ApplicationBuilder, CommandHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_CREDENTIALS = json.loads(os.getenv("GOOGLE_CREDENTIALS"))
SPREADSHEET_ID = "1DpbYJ5f6zdhIl1zDtn6Z3aCHZRDFTaqhsCrkzNM9Iqo"

# üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
ALLOWED_USERS = [929686990, 6066119769]

# üß† –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
known_log_entries = set()

# üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def get_log_sheet():
    creds = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDENTIALS, [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ])
    client = gspread.authorize(creds)
    spreadsheet = client.open_by_key(SPREADSHEET_ID)
    return spreadsheet.worksheet("Changes Log")

# üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
async def check_for_updates(context):
    try:
        log_sheet = get_log_sheet()
        rows = log_sheet.get_all_values()[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        new_entries = []

        for row in rows:
            if len(row) < 4:
                continue

            log_date, change_type, app_number, package_name = row

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π —Ç–∏–ø –∑–∞–ø–∏—Å–∏
            if change_type == "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä":
                unique_key = f"{log_date}-{change_type}-{app_number}-{package_name}"
                if unique_key not in known_log_entries:
                    known_log_entries.add(unique_key)
                    new_entries.append((app_number, package_name))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        for app_number, package_name in new_entries:
            message = f"üì≤ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_number} –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ —Å—Ç–æ—Ä:\nhttps://play.google.com/store/apps/details?id={package_name}"
            for user_id in ALLOWED_USERS:
                try:
                    await context.bot.send_message(chat_id=user_id, text=message)
                    logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")

# üß™ –ö–æ–º–∞–Ω–¥–∞ /me –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ chat_id
async def me_command(update, context):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"üë§ –¢–≤–æ–π chat_id: {chat_id}")

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("me", me_command))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    app.job_queue.run_repeating(check_for_updates, interval=300, first=5)

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())

